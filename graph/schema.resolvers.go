package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"os"

	"github.com/nxtcoder19/go_graphql_api/graph/model"
	"github.com/nxtcoder19/go_graphql_api/package/mongo"
	graphql_db "github.com/nxtcoder19/go_graphql_api/src/graphql/domain"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	//db.ConnectDB(context.TODO())
	link := model.Link{
		Title:   input.Title,
		Address: input.Address,
		User: &model.User{
			Name: "test",
		},
	}

	// Call the CreateLink method with the new link
	createdLink := graphql_d.CreateLink(ctx, link.Title, link.Address, *link.User)
	if createdLink == nil {
		return nil, fmt.Errorf("Failed to create link")
	}

	return createdLink, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input *model.NewPost) (*model.Post, error) {
	//panic(fmt.Errorf("not implemented: CreatePost - createPost"))
	post := model.Post{
		Title:   input.Title,
		Content: input.Content,
	}
	createdPost := graphql_d.CreatePost(ctx, post.Title, post.Content)
	if createdPost == nil {
		return nil, fmt.Errorf("Failed to create post")
	}
	return createdPost, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	links := graphql_d.GetLinks(ctx)

	return links, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context) ([]*model.Post, error) {
	//panic(fmt.Errorf("not implemented: GetAllPosts - GetAllPosts"))
	posts := graphql_d.GetPosts(ctx)
	return posts, nil
}

// GetOnePost is the resolver for the GetOnePost field.
func (r *queryResolver) GetOnePost(ctx context.Context, id string) (*model.Post, error) {
	//panic(fmt.Errorf("not implemented: GetOnePost - GetOnePost"))
	fmt.Println("aa", id)
	post := graphql_d.GetPost(ctx, id)
	return post, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var mongoUrl = os.Getenv("MONGO_URI")
var db = mongo.NewDB("xyz", mongoUrl)
var graphql_d = graphql_db.NewGraphQl(db)
var connected = db.ConnectDB(context.TODO())
